@top Cascade { entry+ }

// @precedence {
//   eventStart @cut
// }

entry { TagColor | Event }

Event[@dynamicPrecedence=1] { ~possibleEventStart inlineSpace* DateRange inlineSpace* ':' inlineSpace* EventDescription }

EventDescription { ~possibleEventStart anything+ }

@tokens {
  TagColor { '#' (std.asciiLetter | std.digit)+ ':' (std.asciiLetter | std.digit )+ }

  year { std.digit std.digit std.digit std.digit }

  month { 
    '01' | '02' | '03' | '04' | '05' | '06' | '07' | '08' | '09' | 
    '10' | '11' | '12' 
  }

  day { 
    '00' | '01' | '02' | '03' | '04' | '05' | '06' | '07' | '08' | '09' | 
    '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18' | '19' | 
    '20' | '21' | '22' | '23' | '24' | '25' | '26' | '27' | '28' | '29' | 
    '30' | '31' 
  }

  hour { 
    '00' | '01' | '02' | '03' | '04' | '05' | '06' | '07' | '08' | '09' | 
    '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18' | '19' | 
    '20' | '21' | '22' | '23'
  }
  
  minute {
    '00' | '01' | '02' | '03' | '04' | '05' | '06' | '07' | '08' | '09' | 
    '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18' | '19' | 
    '20' | '21' | '22' | '23' | '24' | '25' | '26' | '27' | '28' | '29' | 
    '30' | '31' | '32' | '33' | '34' | '35' | '36' | '37' | '38' | '39' | 
    '40' | '41' | '42' | '43' | '44' | '45' | '46' | '47' | '48' | '49' | 
    '50' | '51' | '52' | '53' | '54' | '55' | '56' | '57' | '58' | '59'
  }

  second {
    '00' | '01' | '02' | '03' | '04' | '05' | '06' | '07' | '08' | '09' | 
    '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18' | '19' | 
    '20' | '21' | '22' | '23' | '24' | '25' | '26' | '27' | '28' | '29' | 
    '30' | '31' | '32' | '33' | '34' | '35' | '36' | '37' | '38' | '39' | 
    '40' | '41' | '42' | '43' | '44' | '45' | '46' | '47' | '48' | '49' | 
    '50' | '51' | '52' | '53' | '54' | '55' | '56' | '57' | '58' | '59'
  }

  ISO8601 { year '-' month '-' day 'T' hour ':' minute ':' second 'Z' ('.' std.digit+)? }

  to { inlineSpace* '-' inlineSpace* }

  Date { std.digit+ (('/' std.digit+)? '/' std.digit+)? }
  DateRange { (Date (to Date)?) | (ISO8601 (to ISO8601)?) }

  comment { "//" ![\n]* }
  inlineSpace { $[ \t] }
  anything {std.asciiLetter | std.digit | ![] }

  @precedence {
    comment,
    inlineSpace,
    anything,
    DateRange,
    TagColor
  }
}

@skip { 
  comment
}